{"componentChunkName":"component---src-pages-index-jsx","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Dev.HJ"}},"allMarkdownRemark":{"group":[{"fieldValue":"Java","totalCount":1},{"fieldValue":"design pattern","totalCount":1},{"fieldValue":"effective java","totalCount":2},{"fieldValue":"java","totalCount":14},{"fieldValue":"jpa","totalCount":1},{"fieldValue":"spring","totalCount":1},{"fieldValue":"알고리즘","totalCount":1},{"fieldValue":"운영체제","totalCount":3},{"fieldValue":"자료구조","totalCount":1}],"nodes":[{"excerpt":"토이 프로젝트 코드에서의 문제점 이번에 Comment 기능에 대해 단위 테스트 코드를 작성하고 보냈던 PR에 멘토님이 이런 코드리뷰를 해주셨다.  Controller에서 테스트 코드를 작성하고 결과를 비교하는데, \"댓글이 삭제되었습니다.\" 응답이  필터가 적용되었는데 계속 ???로 응답이 됐다. 그래서 구글링을 해 억지로 헤더에 을 적용시켜서 해봤더니 작…","fields":{"slug":"/content-type/"},"frontmatter":{"date":"May 09, 2022","update":"May 09, 2022","title":"[토이 프로젝트] - Content-Type - application/json","tags":["java","spring"]}},{"excerpt":"","fields":{"slug":"/adapter/"},"frontmatter":{"date":"March 28, 2022","update":"Mar 28, 2022","title":"디자인 패턴 - 어댑터 패턴","tags":["design pattern"]}},{"excerpt":"","fields":{"slug":"/fetch/"},"frontmatter":{"date":"March 25, 2022","update":"Mar 25, 2022","title":"JPA - 즉시로딩과 지연로딩","tags":["java","jpa"]}},{"excerpt":"var","fields":{"slug":"/var/"},"frontmatter":{"date":"March 18, 2022","update":"Mar 18, 2022","title":"Java - var","tags":["java"]}},{"excerpt":"람다와 함수형 인터페이스 Java에 람다 표현식이 추가됨으로써 함수형 인터페이스, 메서드 참소가 등장할 수 있었습니다. 이를 바탕으로 stream API가 탄생했고, 컬렉션 기반의 기술을 편리하고 빠르게 처리할 수 있게 되었습니다. 이번 포스팅에서는 람다와 함수형 인터페이스에 대해 알아보겠습니다. 람다 표현식이 필요한 이유 자바 기반의 프로그램은 계속해서…","fields":{"slug":"/lambda/"},"frontmatter":{"date":"March 11, 2022","update":"Mar 11, 2022","title":"Java - 람다와 함수형 인터페이스","tags":["java"]}},{"excerpt":"아이템2 - 생성자에 매개변수가 많다면 빌더를 고려하라 static 팩토리 메소드와 public 생성자는 똑같은 제약이 있습니다. 바로 매개변수가 많아질 때 적절히 대응하기가 어렵다는 점입니다. 각각의 경우를 식품 포장의 영양정보를 표현하는 클래스인  클래스를 예를 들어 설명하겠습니다. 생성자 영양정보 클래스는 1회 내용량, 총 n회 제공량, 1회 제공량…","fields":{"slug":"/item2/"},"frontmatter":{"date":"March 09, 2022","update":"Mar 09, 2022","title":"이펙티브 자바 - 아이템 2","tags":["java","effective java"]}},{"excerpt":"동시성","fields":{"slug":"/concurrency/"},"frontmatter":{"date":"March 08, 2022","update":"Mar 08, 2022","title":"Effective Java - 동시성(Item 78)","tags":["java","effective java"]}},{"excerpt":"LongAdder와 LongAccumulator 이전 포스팅에서는 Atomic Type에 대하여 알아보았다. -> Atomic Type에 대하여 Atomic 클래스는 원자성을 보장하고 CAS 알고리즘으로 구현되어있다. 쓰레드 간의 경쟁(Race condition)이 심한 경우 CPU 소모가 크겠지만 Lock을 사용하는 것 보단 성능적 측면에서 우위에 있을…","fields":{"slug":"/adder-accumulator/"},"frontmatter":{"date":"March 04, 2022","update":"Mar 04, 2022","title":"Java - LongAdder와 LongAccumulator","tags":["java"]}},{"excerpt":"Atomic 자바의 concurrency API에서 제공하는 Atomic Type에 대해 알아보겠다. 멀티 쓰레딩 프로그래밍에서는 기본적으로 동시성 문제를 고려해야되는데, 이러한 문제들을 해결하기 위해 자바에서는 다양한 방법을 제공한다. 대표적으로 Atomic Type, volatile, synchronized가 있다. Atomic Type을 설명하기전에…","fields":{"slug":"/atomic/"},"frontmatter":{"date":"March 02, 2022","update":"Mar 02, 2022","title":"Java - Atomic","tags":["java"]}},{"excerpt":"쓰레드란?? 이전 포스팅에서 프로세스에 대해 알아보았다. 프로세스는 간단히 설명하면 프로그램이 메모리에 올라가 CPU를 할당받은 실행중인 프로그램이라고 말할 수 있다. 그리고 프로그램을 수행하는데 필요한 데이터와 메모리 등의 자원 그리고 쓰레드로 구성되어 있으며 이 자원들을 이용해 실제로 작업을 수행하는 실행되는 흐름의 단위를 쓰레드라고 한다. 쓰레드는 …","fields":{"slug":"/thread/"},"frontmatter":{"date":"March 01, 2022","update":"Mar 01, 2022","title":"[운영체제(OS)] 3. 쓰레드(Thread)","tags":["운영체제"]}},{"excerpt":"IPC란 프로세스는 독립적으로 실행되거나 서로 협력하면서 실행될 수 있다. 독립적이란 말은 다른 프로세스들과 데이터를 공유하지 않는다는 것이고 반대로 협력적이라는 것은 다른 프로세스들과 데이터를 공유한다는 것이고 다른 프로세스에 영향을 주거나 받을 수 있다. 이때 프로세스들의 통신을 IPC(inter process communication)이라고 한다. …","fields":{"slug":"/process2/"},"frontmatter":{"date":"February 26, 2022","update":"Feb 26, 2022","title":"[운영체제(OS)] 2.프로세스-IPC","tags":["운영체제"]}},{"excerpt":"HashMap, HashTable, ConcurrentHashMap의 차이 HashMap, HashTable, ConcurrentHashMap은 모두 Java API 이름이다. HashTable과 HashTable 그리고 ConcurrentHashMap을 정의한다면, '키에 대한 해시 값을 사용하여 값을 저장하고 조회하며, 키-값 쌍의 개수에 따라 동적으…","fields":{"slug":"/map/"},"frontmatter":{"date":"February 25, 2022","update":"Feb 25, 2022","title":"HashMap, HashTable, ConcurrentHashMap","tags":["java"]}},{"excerpt":"프로세스란? 프로세스의 정의는 다음과 같다. \"A process is a program in excution\" 실행 중인 프로그램을 프로세스라고 한다. 그럼 프로그램과 프로세스의 차이는 뭘까?? 프로그램: 디스크에 저장되어있는 일련의 명령어들의 집합(.exe같은 파일 시스템에 존재하는 실행파일) 프로세스: 그 프로그램이 메모리에 적재되어 실행중인 프로그램…","fields":{"slug":"/process/"},"frontmatter":{"date":"February 24, 2022","update":"Feb 24, 2022","title":"[운영체제(OS)] 1.프로세스","tags":["운영체제"]}},{"excerpt":"제너릭(Generic) 제너릭(generic)이란 데이터의 타입을 일반화(generalize)한다는 것을 의미한다.  제너릭은 클래스나 메소드에서 사용할 내부 데이터 타입을 컴파일 시에 미리 지정하는 방법이다. 제너릭을 사용하면 다음과 같은 장점을 갖는다. 클새스나 메소드 내부에서 사용되는 객체의 타입 안정성을 높일 수 있다. 반환값에 대한 타입 변환 및…","fields":{"slug":"/generic/"},"frontmatter":{"date":"February 20, 2022","update":"Feb 21, 2022","title":"제너릭(Generic)","tags":["java"]}},{"excerpt":"HashMap","fields":{"slug":"/hashmap/"},"frontmatter":{"date":"February 19, 2022","update":"Feb 19, 2022","title":"HashMap","tags":["Java"]}},{"excerpt":"문제 문자열 중복 확인 문자열이 주어졌을 때, 이 문자열에 같은 문자가 중복되어 등장하는지 확인하는 알고리즘을 작성하라. 나의 첫 풀이 문자열 \"abcda\"가 주어졌을 때 'a'가 중복되므로 false를 반환하고 \"abcd\"가 주어지면 중복이 없으므로 true를 반환하면 된다. 부끄럽지만 내가 처음에 짠 코드는 다음과 같다. 입력 받은 문자열을 char …","fields":{"slug":"/string/"},"frontmatter":{"date":"February 17, 2022","update":"Feb 17, 2022","title":"문자열 중복 ","tags":["알고리즘"]}},{"excerpt":"String Constant Pool  의 두가지 생성 방식이 있고 각각의 차이점이 있다.  를 이용한 생성 방식 리터럴을 이용한 생성 방식 두 가지 방식의 큰 차이점은  연산자로 String 객체를 생성하면 Heap 영역에 객체를 저장하고, 리터럴로 String 객체를 생성하면 내부적으로 메소드가 호출되고 String Constant Pool 이라는 영…","fields":{"slug":"/stringPool/"},"frontmatter":{"date":"February 14, 2022","update":"Feb 14, 2022","title":"String Pool","tags":["java"]}},{"excerpt":"equals 와 == equals 와 == 연산자는 기본적으로 양 쪽의 내용을 비교한 결과를 boolean type으로 반환한다는 공통점을 가지고 있다. ==연산자 == 연산자는 피 연산자가 기본 자료형 타입일 경우 값이 같은지 비교하고, 피연산자가 그 외 객체 참조 타입인 경우 주소값을 비교한다. 위의 예제를 보면 기본자료형 타입은 값을 비교하기 때문에…","fields":{"slug":"/equals/"},"frontmatter":{"date":"February 10, 2022","update":"Feb 10, 2022","title":"equals와 ==","tags":["java"]}},{"excerpt":"기본 자료형 데이터 타입은 데이터가 메모리에 어떻게 저장되고, 프로그램에서 어떻게 처리되어야 하는지를 명시적으로 알려주는 역할을 한다. 자바에서는 여려 형태의 타입을 미리 정의하여 제공하는데 이것을 기본 타입이라고 한다. 자바에는 8종류의 기본 타입이 제공되며, 크게 정수형, 실수형, 문자형, 논리형 타입으로 나눌 수 있다. 정수형 타입 자바의 기본 타입…","fields":{"slug":"/primitive-type/"},"frontmatter":{"date":"February 09, 2022","update":"Feb 09, 2022","title":"기본 타입(primitive type)","tags":["java"]}},{"excerpt":"공부를 하다보니 HashCode, HashSet, HashMap 등 해시란 용어가 자주 언급이되서 더 자세히 알아보기 위해 글을 작성했다. 해싱이란? 해싱(Hashing)은 키값을 비교하여 찾는 검색 방법이 아니라 산술적인 연산을 이용하여 키가 있는 위치를 계산하여 바로 찾아가는 계산 검색 방식이다.\n키값을 원소 위치로 변환하는 함수를 해시 함수(Hash…","fields":{"slug":"/hashing/"},"frontmatter":{"date":"February 04, 2022","update":"Feb 04, 2022","title":"해싱이란?","tags":["자료구조"]}},{"excerpt":"Java Virtaul Machine JVM JVM Java Virtual Machine 자바 가상 머신을 약자로 줄여놓은 용어이다. 가상머신이란 프로그램을 실행시키기 위해 물리적 머신과 유사한 머신을 소프트웨어로 구현한 것이라고 할 수 있다. JVM은 자바 어플리케이션을 클래스 로더를 통해 읽어 자바 API와 함께 실행시키는 역할을 한다. JVM의 특징…","fields":{"slug":"/jvm/"},"frontmatter":{"date":"January 29, 2022","update":"Jan 29, 2022","title":"Java Virtaul Machine","tags":["java"]}}]}},"pageContext":{}},"staticQueryHashes":[]}