{"componentChunkName":"component---src-templates-post-jsx","path":"/string/","result":{"data":{"site":{"siteMetadata":{"title":"Dev.HJ"}},"markdownRemark":{"id":"e9ec703f-3d62-523a-b7c7-f121c47bbf9f","excerpt":"문제 문자열 중복 확인 문자열이 주어졌을 때, 이 문자열에 같은 문자가 중복되어 등장하는지 확인하는 알고리즘을 작성하라. 나의 첫 풀이 문자열 \"abcda\"가 주어졌을 때 'a'가 중복되므로 false를 반환하고 \"abcd\"가 주어지면 중복이 없으므로 true를 반환하면 된다. 부끄럽지만 내가 처음에 짠 코드는 다음과 같다. 입력 받은 문자열을 char …","html":"<h2>문제</h2>\n<p>문자열 중복 확인</p>\n<p>문자열이 주어졌을 때, 이 문자열에 같은 문자가 중복되어 등장하는지 확인하는 알고리즘을 작성하라.</p>\n<h2>나의 첫 풀이</h2>\n<p>문자열 \"abcda\"가 주어졌을 때 'a'가 중복되므로 false를 반환하고 \"abcd\"가 주어지면 중복이 없으므로 true를 반환하면 된다.</p>\n<p>부끄럽지만 내가 처음에 짠 코드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> st<span class=\"token operator\">=</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">isDuplicated</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isDuplicated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        string<span class=\"token punctuation\">.</span><span class=\"token function\">getChars</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> chars<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> chars<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span> value <span class=\"token operator\">=</span> chars<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> chars<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">==</span>chars<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>입력 받은 문자열을 char 배열로 변환시킨다.</li>\n<li>첫 번째 for문에서는 배열의 내용과 비교할 값을 뽑아낸다.</li>\n<li>다음 for문에서 뽑아낸 값의 인덱스 i와 비교하고자 하는 배열의 인덱스 j가 같으면 continue로 건너뛰고 다음 비교에서 같은 값이 찾아지면 false를 반환한다.</li>\n</ol>\n<p>물론 원하는 결과를 얻을 순 있지만 간단히 보기만해도 비효율적인 코드라는 것이 느껴진다...</p>\n<h2>풀이 2</h2>\n<p>문자열이 ASCII 문자열이라고 가정해 보자. 아스키 문자열은 1비트는 에러 확인을 위한 parity bit로 사용하고, 그리고 나머지 7비트로 총 128개의 부호를 나타낸다. 그러면 문자열의 길이가 128이 넘어가게되면 당연히 중복된 문자가 있을 수 밖에 없다. 그리고 <code class=\"language-text\">'A' = 65 'B' = 66</code>같이 고유의 정수 값을 가지고 있다. 이를 토대로 코드를 작정하면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isDuplicated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> check <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            check<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>문자열의 길이가 128을 넘어가면 false를 반환한다.</li>\n<li>문자열의 길이만큼 반복문을 돌며 해당 값이 이미 존재하는지 확인한다.</li>\n</ol>\n<p>아스키 문자열이라고 가정하는 것 하나로 코드가 간단해졌다.\n이 코드의 시간 복잡도는 O(n)이다. (n은 문자열의 길이)</p>\n<h2>풀이 3</h2>\n<p>비트 벡터를 사용하면 필요한 공간을 줄일 수 있다. 문자열이 소문자 a부터 z까지라고 가정한다.\na부터 z까지의 문자는 총 26개이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isDuplicated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> checker <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>checker <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        checker <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>만약 <code class=\"language-text\">string.charAt(i) = 'a'</code>라면 <code class=\"language-text\">val = 0</code>, <code class=\"language-text\">string.charAt(i) = 'b'</code> 라면 <code class=\"language-text\">val=1</code>....라고 할 수 있다. 따라서 val는 0에서 25까지의 정수 값이 될 수 있다.</li>\n<li><code class=\"language-text\">1&lt;&lt;val</code>는 1을 val 만큼 왼쪽 시프트 연산하여 해당 알파벳을 비트 값으로 표현한다. 연산 후의 값은 <code class=\"language-text\">a = .... 0001</code>, <code class=\"language-text\">b = .... 0010</code>, <code class=\"language-text\">g = .... 0100 0000</code>이 된다.</li>\n<li><code class=\"language-text\">if((checker &amp; (1&lt;&lt;val))>0)</code> 조건문에서는 checker와 알파벳 비트값을 AND 연산하여 값의 중복여부를 판단한다.</li>\n<li><code class=\"language-text\">checker |= (1&lt;&lt;val);</code> OR 연산으로 해당 알파벳의 비트 값을 1로 조정한다.</li>\n</ol>\n<hr>\n<h3>결론</h3>\n<p>다양한 풀이를 알아보았다. 내가 처음에 풀었던 코드는 너무 형편없지만 꾸준히 문제를 풀어나가면 더 효율적인 방법을 찾고 새로운 시각으로 문제를 풀어나갈 수 있을 것이라 기대한다...</p>","frontmatter":{"title":"문자열 중복 ","date":"February 17, 2022","update":"February 17, 2022","tags":["알고리즘"],"series":null},"fields":{"slug":"/string/","readingTime":{"minutes":4.71}}},"seriesList":{"edges":[{"node":{"id":"aeeabe20-f428-571f-a085-6cb528323517","fields":{"slug":"/jvm/"},"frontmatter":{"title":"Java Virtaul Machine"}}},{"node":{"id":"d322ca1f-aa27-5fc4-8ceb-7982c5738663","fields":{"slug":"/hashing/"},"frontmatter":{"title":"해싱이란?"}}},{"node":{"id":"85f7d472-c933-5918-9df5-33510bbd5c40","fields":{"slug":"/primitive-type/"},"frontmatter":{"title":"기본 타입(primitive type)"}}},{"node":{"id":"bbbb67ac-6c95-5684-b034-0f5e0ddc8ca1","fields":{"slug":"/equals/"},"frontmatter":{"title":"equals와 =="}}},{"node":{"id":"9c040466-1d6f-5b3f-b1e2-b611a0920f53","fields":{"slug":"/stringPool/"},"frontmatter":{"title":"String Pool"}}},{"node":{"id":"e9ec703f-3d62-523a-b7c7-f121c47bbf9f","fields":{"slug":"/string/"},"frontmatter":{"title":"문자열 중복 "}}},{"node":{"id":"c8e0cf33-615a-59be-bc1e-e26c406c927d","fields":{"slug":"/hashmap/"},"frontmatter":{"title":"HashMap"}}},{"node":{"id":"4e14a9fa-fa01-5cbc-9153-9bc68655ca17","fields":{"slug":"/generic/"},"frontmatter":{"title":"제너릭(Generic)"}}},{"node":{"id":"7c769d15-9003-56b7-9fc5-b1b960da36c0","fields":{"slug":"/process/"},"frontmatter":{"title":"[운영체제(OS)] 1.프로세스"}}},{"node":{"id":"4da2182b-2793-5418-a407-01f29fbbd757","fields":{"slug":"/map/"},"frontmatter":{"title":"HashMap, HashTable, ConcurrentHashMap"}}},{"node":{"id":"15a49153-8fff-5ab6-953e-5215b8e2faec","fields":{"slug":"/process2/"},"frontmatter":{"title":"[운영체제(OS)] 2.프로세스-IPC"}}},{"node":{"id":"0e33327d-d671-5b12-aa17-919f5b7107bd","fields":{"slug":"/thread/"},"frontmatter":{"title":"[운영체제(OS)] 3. 쓰레드(Thread)"}}},{"node":{"id":"794b97e8-63d4-5ed3-b203-d391651ec308","fields":{"slug":"/atomic/"},"frontmatter":{"title":"Java - Atomic"}}},{"node":{"id":"e7ea69fe-b48d-530a-9cb3-6cb7afeb7f67","fields":{"slug":"/adder-accumulator/"},"frontmatter":{"title":"Java - LongAdder와 LongAccumulator"}}},{"node":{"id":"678a2cb4-6b30-5113-9297-704160fe3a46","fields":{"slug":"/lambda/"},"frontmatter":{"title":"Java - 람다와 함수형 인터페이스"}}},{"node":{"id":"ea516931-cf7d-5fe6-a5e2-43145feed0e7","fields":{"slug":"/var/"},"frontmatter":{"title":"Java - var"}}},{"node":{"id":"03eac536-09bf-5d35-9903-1e5eff2c7123","fields":{"slug":"/fetch/"},"frontmatter":{"title":"JPA - 즉시로딩과 지연로딩"}}},{"node":{"id":"97f1315c-697a-52a2-ae72-77e3cb4869ec","fields":{"slug":"/content-type/"},"frontmatter":{"title":"[토이 프로젝트] - Content-Type - application/json"}}}]},"previous":{"fields":{"slug":"/stringPool/"},"frontmatter":{"title":"String Pool"}},"next":{"fields":{"slug":"/hashmap/"},"frontmatter":{"title":"HashMap"}}},"pageContext":{"id":"e9ec703f-3d62-523a-b7c7-f121c47bbf9f","series":null,"previousPostId":"9c040466-1d6f-5b3f-b1e2-b611a0920f53","nextPostId":"c8e0cf33-615a-59be-bc1e-e26c406c927d"}},"staticQueryHashes":[]}